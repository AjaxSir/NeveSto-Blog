(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{411:function(e,n,s){"use strict";s.r(n);var o=s(55),t=Object(o.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"手写简单的loader及plugins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手写简单的loader及plugins"}},[e._v("#")]),e._v(" 手写简单的loader及plugins")]),e._v(" "),s("ul",[s("li",[e._v("plugins")])]),e._v(" "),s("blockquote",[s("p",[e._v("理解Compiler（负责编译）"),s("br"),e._v("\n开发插件首先要知道compiler和 compilation 对象是做什么的"),s("br"),e._v(" "),s("strong",[e._v("Compiler")]),e._v(" 对象包含了当前运行Webpack的配置，包括entry、output、loaders等配置，这个对象在启动Webpack时被实例化，而且是全局唯一的。Plugin可以通过该对象获取到Webpack的配置信息进行处理。"),s("br"),e._v(" "),s("strong",[e._v("compilation")]),e._v(" 代表这一次资源构建的过程，在 compilation 对象中我们可以通过一系列 API 访问/修改本次打包生成的 module、assets 以及 chunks 。")])]),e._v(" "),s("ul",[s("li",[e._v("compiler.hooks.阶段.tap函数('插件名称', (阶段回调参数) => {});")])]),e._v(" "),s("blockquote",[s("p",[e._v("常见阶段"),s("br"),e._v('\ndone: new AsyncSeriesHook(["stats"]),//一次编译完成后执行，回调参数：stats'),s("br"),e._v('\nbeforeRun: new AsyncSeriesHook(["compiler"]),'),s("br"),e._v('\nrun: new AsyncSeriesHook(["compiler"]),//在编译器开始读取记录前执行'),s("br"),e._v('\nemit: new AsyncSeriesHook(["compilation"]),//在生成文件到output目录之前执行，回调参数： compilation'),s("br"),e._v('\nafterEmit: new AsyncSeriesHook(["compilation"]),//在生成文件到output目录之后执行'),s("br"),e._v('\ncompilation: new SyncHook(["compilation", "params"]),//在一次compilation创建后执行插件'),s("br"),e._v('\nbeforeCompile: new AsyncSeriesHook(["params"]),'),s("br"),e._v('\ncompile: new SyncHook(["params"]),//在一个新的compilation创建之前执行'),s("br"),e._v('\nmake:new AsyncParallelHook(["compilation"]),//完成一次编译之前执行')])]),e._v(" "),s("blockquote",[s("p",[e._v("tap函数"),s("br"),e._v("\ntap 同步钩子"),s("br"),e._v("\ntapAsync 异步钩子，通过callback回调告诉Webpack异步执行完毕"),s("br"),e._v("\ntapPromise 异步钩子，返回一个Promise告诉Webpack异步执行完毕")])]),e._v(" "),s("h4",{attrs:{id:"举个栗子-手写一个打包完成压缩插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举个栗子-手写一个打包完成压缩插件"}},[e._v("#")]),e._v(" 举个栗子：手写一个打包完成压缩插件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// plugin.js\nconst JSZip = require('jszip') // jszip是一个用于创建、读取和编辑.zip文件\nconst { RawSource } = require('webpack-sources') // 用于写入webpack打包的二进制文件, 可以看做是一个buffer包装层\nclass ZipPlugins {\n    constructor(options) {\n        console.log(options, 'options')\n        this.options = options\n    }\n    apply(complier) {\n        complier.hooks.emit.tapAsync('Zip', (compi, callback) => {\n            const zip = new JSZip()\n            for (const item in compi.assets) {\n                const sources = compi.assets[item].source() \n                zip.file(item, sources)  // 使用.file(fileName,fileContent)添加文件\n            }\n            zip.generateAsync({ type: 'nodebuffer' }).then(content => { // 生成文件\n                compi.assets[this.options.name || 'dist.zip'] = new RawSource(content)\n                callback()\n            })\n        })\n    }\n}\nmodule.exports = ZipPlugins \n")])])]),s("h5",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// vue.config.js\nconst ZipPlugins = require('./plugins')\nconfigureWebpack: {\n        ...,\n        plugins: [\n            new ZipPlugins({ name: 'sxl.zip' })\n        ]\n    },\n")])])]),s("ul",[s("li",[e._v("loader")])]),e._v(" "),s("blockquote",[s("p",[e._v("其实loader就是个函数，他的参数是这个loader匹配到的源文件，它的返回值就是模块处理后的结果")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// jsloader.js\nconst loadUtils = require('loader-utils') // loader-utils是一个webpack工具类,通过一些方法配合loader处理文件\nmodule.exports = function(source) {\n    const options = loadUtils.getOptions(this)\n    console.log(options, source)\n    const result = source.replace('123123123', options.name)\n    this.callback(null, result)\n} \n\n")])])]),s("ul",[s("li",[e._v("loader使用")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("chainWebpack: (config) => {\n    config.module\n            .rule('js')\n            .test(/\\.js$/)\n            .use('./jsloader.js')\n            .loader('./jsloader.js')\n            .options({\n                name: '下载1111'\n            })\n            .end()\n}\n\n")])])])])}),[],!1,null,null,null);n.default=t.exports}}]);