(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{412:function(t,e,n){"use strict";n.r(e);var a=n(55),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"vue-2-x-简单实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-2-x-简单实现"}},[t._v("#")]),t._v(" vue 2.x 简单实现")]),t._v(" "),n("p",[t._v("第一步：实现vue构造函数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\nnew Vue({\n    el: '#app',\n    data: {\n        test: '测试',\n        home: '主页'\n    }\n})\n\n")])])]),n("p",[t._v("第二步：初步vue构造函数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Vue {\n    constructor(option) {\n      this.el = document.querySelector(option.el)\n      this.$data = option.data\n    }\n}\n")])])]),n("p",[t._v("第三步: 将传入的data数据添加set get属性为后面双向绑定做准备")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("./src/build.js\nclass Vue {\n    constructor(option) {\n      this.el = document.querySelector(option.el)\n      this.$data = option.data\n      this.Observe(this.$data)\n    }\n    // 数据监听器也是发布者\n    Observe(data) {\n        for (let key in data) {\n            let value = data[key]\n            // configurable 控制是否可以删除 writable 控制是否可以修改(赋值)\n            Object.defineProperty(this.$data, key, {\n              enumerable: true, // 可枚举\n              configurable: true,\n              writable: true,\n                get: function() {\n                    return value\n                },\n                set: function(newVal) {\n                    if (value !== newVal) {\n                        value = newVal\n                    }\n                }\n            })\n        }\n    }\n}\n")])])]),n("p",[t._v("第四步: 实现html编译")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>\n        <%= htmlWebpackPlugin.options.title %>\n    </title>\n</head>\n\n<body>\n    <div id="app" class="single">\n        <div v-text="test"></div>\n        <div v-text="home"></div>\n        <input type="text" v-model="home">\n    </div>\n    <img src="./img/logo.jpeg" alt="">\n</body>\n<script src="./src/build.js"><\/script>\n\n</html>\n')])])]),n("p",[t._v("编译部分代码,获取节点属性 通过节点属性 并收集对应的订阅")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 编译器，负责指令解析，创建订阅者等\n    Combile(el) {\n        for (var i = 0; i < el.children.length; i++) {\n            const children = el.children[i]\n            if (children.children.length) {\n                this.Combile(children)\n            } else {\n                if (children.hasAttribute('v-text')) {\n                    var val = children.getAttribute('v-text')\n                    this.dir[val].push(new Watcher(children, 'innerHTML', val, this.$data))\n                }\n                if (children.hasAttribute('v-model')) {\n                    const val = children.getAttribute('v-model')\n                    this.dir[val].push(new Watcher(children, 'value', val, this.$data))\n                    children.addEventListener('input', function(value) {\n                        this.$data[val] = children.value\n                    }.bind(this)) // 改变this指向 或者使用箭头函数\n                }\n            }\n        }\n    }\n    // 订阅者，收到数据更新去更新视图\nclass Watcher {\n    constructor(node, type, key, data) {\n        this.node = node // 当前节点\n        this.type = type // 节点内容\n        this.key = key // data内的key值\n        this.$data = data // 构造vue时传入的data值\n        this.update() // 更新节点的值\n    }\n    update() {\n        this.node[this.type] = this.$data[this.key]\n    }\n}\n")])])]),n("p",[t._v("完成代码:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\nclass Vue {\n    constructor(option) {\n        this.el = document.querySelector(option.el)\n        this.$data = option.data\n        this.dir = {} // 起收集订阅者作用 dir: { test: [], home: []  } 对data的属性收集订阅\n        this.Observe(this.$data)\n        this.Combile(this.el)\n    }\n    // 数据监听器也是发布者\n    Observe(data) {\n        for (let key in data) {\n            this.dir[key] = []\n            let value = data[key]\n            const watcher = this.dir[key]\n            // configurable 控制是否可以删除 writable 控制是否可以修改(赋值)\n            Object.defineProperty(this.$data, key, {\n              enumerable: true, // 可枚举\n              configurable: true,\n              writable: true,\n                get: function() {\n                    return value\n                },\n                set: function(newVal) {\n                    if (value !== newVal) {\n                        value = newVal\n                        watcher.forEach(item => {\n                            item.update()\n                        })\n                    }\n                }\n            })\n        }\n    }\n    // 编译器，负责指令解析，创建订阅者等\n    Combile(el) {\n        for (var i = 0; i < el.children.length; i++) {\n            const children = el.children[i]\n            if (children.children.length) {\n                this.Combile(children)\n            } else {\n                if (children.hasAttribute('v-text')) {\n                    var val = children.getAttribute('v-text')\n                    this.dir[val].push(new Watcher(children, 'innerHTML', val, this.$data))\n                }\n                if (children.hasAttribute('v-model')) {\n                    const val = children.getAttribute('v-model')\n                    this.dir[val].push(new Watcher(children, 'value', val, this.$data))\n                    children.addEventListener('input', function(value) {\n                        this.$data[val] = children.value\n                    }.bind(this)) // 改变this指向 或者使用箭头函数\n                }\n            }\n        }\n    }\n    // 订阅者，收到数据更新去更新视图\nclass Watcher {\n    constructor(node, type, key, data) {\n        this.node = node // 当前节点\n        this.type = type // 节点内容\n        this.key = key // data内的key值\n        this.$data = data // 构造vue时传入的data值\n        this.update() // 更新节点的值\n    }\n    update() {\n        this.node[this.type] = this.$data[this.key]\n    }\n}\n\n\n")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);