(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{414:function(n,e,s){"use strict";s.r(e);var t=s(55),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"基本配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本配置"}},[n._v("#")]),n._v(" 基本配置")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const UglifyJsPlugin = require('uglifyjs-webpack-plugin')//生产环境取消打印\nconst CompressionWebpackPlugin = require('compression-webpack-plugin')//gzip压缩\nfunction getPagesInfo() {\n    let pages = {}\n    const glob = require('glob') // 引入glob模块,用于扫描全部src/pages/**/main.js（返回的是一个数组）\n    glob.sync('src/pages/**/main.js').forEach((entry, i) => {\n        let name = entry.slice(10, -8)\n        pages[name] = {\n            entry: entry,\n            template: 'public.index.html',\n            filename: name + '.html',\n            title: '',\n            chunks: [\"chunk-vendors\", \"chunk-common\", name]\n        }\n    })\n    return pages\n}\n\nmodule.exports = {\n    pages: getPagesInfo(),//多页面应用配置\n    // baseUrl 从 Vue CLI 3.3 起已弃用 对应index.html里面的BASE_URL\n    publicPath: process.env.NODE_ENV === 'production'\n    ? '/my-app/' // https://www.my-app.com/my-app/ 部署在子路劲上\n    : '/',\n    assetsDir: '', // Default: ''\n    outputDir: 'dist', // Default: 'dist' 生成的生产环境构建文件的目录\n    productionSourceMap: false, // 生产环境的 source map，可以将其设置为 false 以加速生产环境构建，默认值是true\n    devServer: {\n    open: true,             //自动打开浏览器\n    host: 'localhost',      //默认打开域名\n    port: 8080,             //默认打开端口号\n    https: false,           //开启关闭https请求\n    hot: false,         //热更\n    proxy: {\n      // 配置跨域\n      '/api': {\n        target: 'http://dev.aabb.cn:8082/', //代理地址，这里设置的地址会代替axios中设置的baseURL\n        ws: true,   //// proxy websockets\n        changeOrigin: true,// 如果接口跨域，需要进行这个参数配置\n        pathRewrite: {                //pathRewrite方法重写url\n          '^/api': '/',\n        },\n      },\n    },\n  },\n  chainWebpack: config => {\n    config.resolve.alias\n      .set(\"@\", resolve(\"src\"))\n      .set(\"@v\", resolve(\"src/views\"))\n      .set(\"@c\", resolve(\"src/components\"))\n      .set(\"@u\", resolve(\"src/utils\"))\n      .set(\"@s\", resolve(\"src/service\")); /* 别名配置 */\n    config.optimization.runtimeChunk(\"single\");\n  },\n  configureWebpack: (config) => {\n          // 为生产环境修改配置\n        if (process.env.NODE_ENV === 'production') {\n      \n            config.plugins.push(\n                  // 1、取消打印\n                new UglifyJsPlugin({\n                    uglifyOptions: {\n                        compress: {\n                            drop_debugger: true,//生产环境自动删除debugger\n                            drop_console: true, //生产环境自动删除console\n                        },\n                        warnings: false,\n                    },\n                    sourceMap: false,   //关掉sourcemap 会生成对于调试的完整的.map文件，但同时也会减慢打包速度\n                    parallel: true, //使用多进程并行运行来提高构建速度。默认并发运行数：os.cpus().length - 1。\n                }),\n\n                // 2、gzip压缩\n                new CompressionWebpackPlugin({\n                    filename: '[path].gz[query]',\n                    algorithm: 'gzip',\n                    test: new RegExp('\\\\.(' + productionGzipExtensions.join('|') + ')$'),\n                    threshold: 10240,\n                    minRatio: 0.8,\n                })\n            )\n        }\n\n        config.output.filename = `[name].${Version}.${Timestamp}.js`  //打包生成的文件\n        config.output.chunkFilename = `[name].${Version}.${Timestamp}.js`\n    },\n    pluginOptions: {\n        \"style-resources-loader\": {\n            preProcessor: \"less\",\n            patterns: [\n                //这个是加上自己的路径，\n                //注意：试过不能使用别名路径\n                path.resolve(__dirname, \"./src/assets/variable.less\")\n            ]\n        }\n    },\n    css: {\n        loaderOptions: {\n        sass: {\n        // @是src的别名\n        data: `\n            @import \"@/assets/variable.scss\";\n        `\n        }\n        }\n    }\n}\n\n")])])]),s("h2",{attrs:{id:"配置externals-忽略打包第三方库-配置如下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置externals-忽略打包第三方库-配置如下"}},[n._v("#")]),n._v(" 配置externals 忽略打包第三方库 配置如下")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const cdn = {\n  // 忽略打包的第三方库\n  /**\n  * externals 对象属性解析：\n  * '包名' : '在项目中引入的名字'\n  * 以element-ui举例 我再main.js里是以\n  * import ELEMENT from 'element-ui'\n  * Vue.use(ELEMENT, { size: 'small' })\n  * 这样引入的，所以我的externals的属性值应该是ELEMENT\n  */\n  externals: {\n    vue: 'Vue',\n    vuex: 'Vuex',\n    'vue-router': 'VueRouter',\n    axios: 'axios',\n    'element-ui': 'ELEMENT'\n  },\n  js: [\n    'https://cdn.jsdelivr.net/npm/vue',\n    'https://unpkg.com/vue-router/dist/vue-router.js',\n    'https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js',\n    'https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.min.js',\n    'https://unpkg.com/element-ui@2.13.2/lib/index.js'\n  ],\n  css: [\n    'https://unpkg.com/element-ui@2.13.2/lib/theme-chalk/index.css'\n  ]\n}\nchainWebpack: (config) => {\n\t\tif (isProduction) {\n\t      config.plugin('html').tap((args) => {\n\t        args[0].cdn = cdn\n\t        return args\n\t      })\n    \t}\n    \tconfig.plugin('html').tap(args => { // 所有环境配置统一的title\n\t        args[0].title = '外部联网协议配置系统'\n\t        return args\n      })\n\t}\n\n\tconfigureWebpack: config => {\n\t\tconfig.externals = cdn.externals\n\t}\n")])])]),s("h3",{attrs:{id:"index-html如下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#index-html如下"}},[n._v("#")]),n._v(" index.html如下")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('css\n<% for (var i in htmlWebpackPlugin.options.cdn && htmlWebpackPlugin.options.cdn.css) { %>\n      <link href="<%= htmlWebpackPlugin.options.cdn.css[i] %>" rel="preload" as="style">\n      <link href="<%= htmlWebpackPlugin.options.cdn.css[i] %>" rel="stylesheet">\n    <% } %>\n    js\n<% for (var i in htmlWebpackPlugin.options.cdn && htmlWebpackPlugin.options.cdn.js) { %>\n      <script src="<%= htmlWebpackPlugin.options.cdn.js[i] %>"><\/script>\n    <% } %>\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);