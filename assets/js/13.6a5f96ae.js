(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{409:function(t,e,n){"use strict";n.r(e);var a=n(55),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"关于vue部分使用技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于vue部分使用技巧"}},[t._v("#")]),t._v(" 关于vue部分使用技巧")]),t._v(" "),n("h3",{attrs:{id:"_1、自动化全局注册组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、自动化全局注册组件"}},[t._v("#")]),t._v(" 1、自动化全局注册组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import Vue from 'vue'\n\n// 处理首字母大写 abc => Abc\nfunction changeStr(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n  // require.context()函数接收三个参数:\n  // 1.directory{String} - 文件夹路径\n  // 2.useSubdirectories{Boolean} - 是否遍历文件的子目录\n  // 3.regExp{RegExp} - 匹配文件的正则\nconst files = require.context('.', false, /\\.vue$/);\n\nfiles.keys().forEach(fileName => {\n  // files作为一个函数,也接受一个参数request,这个和resolve方法的request参数是一样的,即匹配文件的相对路径,而files函数返回的是一个模块,这个模块才是我们想要的\n  const module = files(fileName);\n  console.log('module:' + module);\n  const compName = changeStr(\n    fileName.replace(/^\\.\\//, '').replace(/\\.\\w+$/, '')  //  ./Child1.vue => Child1\n  )\n\n  Vue.component(compName, module.default || module)  // 动态注册该目录下所有的.vue文件\n});\n之后在main.js引入该文件\n")])])]),n("h3",{attrs:{id:"extend拓展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extend拓展"}},[t._v("#")]),t._v(" extend拓展")]),t._v(" "),n("ul",[n("li",[t._v("用法"),n("br"),t._v("\n使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。"),n("br"),t._v("\ndata 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数")]),t._v(" "),n("li",[t._v("自建一个toast组件")])]),t._v(" "),n("h4",{attrs:{id:"先定一个一个toast-vue组件-也可进一步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#先定一个一个toast-vue组件-也可进一步"}},[t._v("#")]),t._v(" 先定一个一个toast.vue组件 也可进一步")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div id="toast" class="toast" v-if="showWrap" :class="showContent ?\'fadein\':\'fadeout\'">\n  \n  {{\n    text\n  }}\n  </div>\n</template>\n\n<style scoped>\n.toast {\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  background: rgba(0, 0, 0, 0.35);\n  padding: 0.3rem;\n  border-radius: 5px;\n  transform: translate(-50%, -50%);\n  color: #fff;\n  font-size: 0.65rem;\n  text-align: justify;\n}\n.fadein {\n  animation: animate_in 0.25s;\n}\n.fadeout {\n  animation: animate_out 0.25s;\n  opacity: 0;\n}\n@keyframes animate_in {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes animate_out {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n</style>\n\n\n')])])]),n("h4",{attrs:{id:"使用extend将定义的toast-vue组件封装挂载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用extend将定义的toast-vue组件封装挂载"}},[t._v("#")]),t._v(" 使用extend将定义的toast.vue组件封装挂载")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import vue from 'vue'\n\n//静态组件\nimport toastComponent from './toast.vue'\n\n// 返回一个扩展实力构造器\nconst ToastConstructor = vue.extend(toastComponent)\n\n// 定义弹出组件的函数 两个参数 显示文本和显示时间\nfunction showToast(text, showtime = 3000) {\n    const toastDom = new ToastConstructor({\n        el: document.createElement('div'),\n        data() {\n            return {\n                text: text,\n                showWrap: true,    // 是否显示组件\n                showContent: true  // 作用:在隐藏组件之前,显示隐藏动画\n            }\n        }\n    })\n\n    // 把实例化的toast.vue 添加到body中\n    document.body.appendChild(toastDom.$el)\n\n    //隐藏\n    setTimeout(() => {\n        toastDom.showContent = false;\n    }, showtime - 1250)\n    // 过了 showtime 时间后隐藏整个组件\n    setTimeout(() => {\n        toastDom.showWrap = false;\n    }, showtime)\n}\n\n// 注册为全局组件的函数\n// 将组件注册到 vue 的 原型链里去,\n// 这样就可以在所有 vue 的实例里面使用 this.$toast()\nfunction registryToast() {\n    vue.prototype.$toast = showToast\n}\n\nexport default registryToast\n")])])]),n("h4",{attrs:{id:"在main-js中"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在main-js中"}},[t._v("#")]),t._v(" 在main.js中")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 注册自定义toast组件\nimport toastRegistry from './components/common/toast/toast'\nVue.use(toastRegistry)\n\n")])])]),n("h4",{attrs:{id:"使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("this.$toast('弹框')\n\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);